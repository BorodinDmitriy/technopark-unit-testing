const assert = require('assert');
const calc = require('../calc.js');

describe("Калькулятор - операция сложения:", function () {

  it('Успешное сложение двух положительных целых чисел выполнено верно => 1 + 3 = 4', () => {
    assert.equal(calc.add(1, 3), 4);
  });

  it('Успешное сложение положительного и отрицательного целых чисел выполнено верно => -4 + 7 = 3', () => {
    assert.equal(calc.add(-4, 7), 3);
  });

  it('Успешное сложение положительного десятичного и отрицательного целого чисел выполнено верно => 0.2589 + -1 = -0.7411', () => {
    assert.equal(calc.add(0.2589, -1), -0.7411);
  });

  it('Успешное сложение двух отрицательных десятичных чисел выполнено верно => -6.39393 + -3.60607 = -10', () => {
    assert.equal(calc.add(-6.39393, -3.60607), -10);
  });

  it('Успешное сложение отрицательного целого числа и нуля выполнено верно => -150 + 0 = -150', () => {
    assert.equal(calc.add(-150, 0), -150);
  });

});

describe("Калькулятор - операция вычитания:", function () {

  it('Успешное вычитание между двумя положительными целыми числами выполнено верно => 99999 - 10000 = 89999', () => {
    assert.equal(calc.subtract(99999, 10000), 89999);
  });

  it('Успешное вычитание из отрицательного целого числа положительного целого выполнено верно => -1000000 - 1 = -1000001', () => {
    assert.equal(calc.subtract(-1000000, 1), -1000001);
  });

  it('Успешное вычитание из положительного десятичного числа отрицательного целого выполнено верно =>  10.00009 - -101 = 111.00009', () => {
    assert.equal(calc.subtract(10.00009, -101), 111.00009);
  });

  it('Успешное вычитание между двумя отрицательными десятичными числами выполнено верно => -0.1 - -7777777.60607 = 7777777.50607', () => {
    assert.equal(calc.subtract(-0.1, -7777777.60607), 7777777.50607);
  });

  it('Успешное вычитание из нуля со знаком минус отрицательного целого числа выполнено верно => -0 - -50 = 50', () => {
    assert.equal(calc.subtract(-0, -50), 50);
  });

  it('Успешное вычитание из положительного десятичного числа нуля выполнено верно => 0.999999 - 0 = 0.999999', () => {
    assert.equal(calc.subtract(0.999999, 0), 0.999999);
  });

});

describe("Калькулятор - операция умножения:", function () {

  it('Успешное умножение двух положительных целых чисел выполнено верно => 10 * 6 = 60', () => {
    assert.equal(calc.multiply(10, 6), 60);
  });

  it('Успешное умножение положительного и отрицательного целых чисел выполнено верно => -1 * 7 = -7', () => {
    assert.equal(calc.multiply(-1, 7), -7);
  });

  it('Успешное умножение положительного десятичного и отрицательного целого чисел выполнено верно => 0.5 * -10 = -5', () => {
    assert.equal(calc.multiply(0.5, -10), -5);
  });

  it('Успешное умножение двух отрицательных десятичных чисел выполнено верно => -0.99 * -9.60607 = 9.5100093', () => {
    assert.equal(calc.multiply(-0.99, -9.60607), 9.5100093);
  });

  it('Успешное умножение отрицательного целого числа и нуля выполнено верно => -1.88 * -0 = 0', () => {
    assert.equal(calc.multiply(-1.88, -0), 0);
  });

});

describe("Калькулятор - операция деления:", function () {

  it('Успешное деление между двумя положительными целыми числами выполнено верно => 155600 / 5 = 31120', () => {
    assert.equal(calc.divide(155600, 5), 31120);
  });

  it('Успешное деление отрицательного целого числа на единицу выполнено верно => -243 / 1 = -243', () => {
    assert.equal(calc.divide(-243, 1), -243);
  });

  it('Успешное деление положительного десятичного числа на отрицательное значение этого же чисал выполнено верно =>  100.500 / -100.500 - = -1', () => {
    assert.equal(calc.divide(100.500, -100.500), -1);
  });

  it('Успешное деление между двумя отрицательными десятичными числами с получением не целого результата выполнено верно => -800.50 / -3.5 = 228.71428571428572', () => {
    assert.equal(calc.divide(-800.5, -3.5), 228.71428571428572);
  });

  it('Успешное деление нуля на отрицательное целое число выполнено верно => 0 / -50 = 50', () => {
    assert.equal(calc.divide(0, -50), 0);
  });

  it('Ошибка при делении положительного десятичного числа на ноль => 0.6 / 0 вернет "На ноль делить нельзя!" ', () => {
    assert.throws(() => calc.divide(0.6, 0), Error, "На ноль делить нельзя!");
  });

});

describe("Калькулятор - валидация входных данных:", function () {

  it('Успешная валидация двух целых положительных чисел', () => {
    assert.equal(calc.isNumeric(100, 7), true);
  });

  it('Успешная валидация отрицательного и положительного десятичных чисел', () => {
    assert.equal(calc.isNumeric(-2.9, 3.0001), true);
  });

  it('Ошибка при валидации целого числа и строки', () => {
    assert.equal(calc.isNumeric(1, 'nastya'), false);
  });

  it('Ошибка при валидации строки и целого числа', () => {
    assert.equal(calc.isNumeric('nastya', 100), false);
  });

  it('Ошибка при валидации двух строк', () => {
    assert.equal(calc.isNumeric('nastya', 'nastya'), false);
  });

});